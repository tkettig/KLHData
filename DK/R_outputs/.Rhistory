short_3syll_meanf0_means$se <- short_3syll_meanf0_means$sd / sqrt(short_3syll_meanf0_means$count)
short_3syll_meanf0_means$tval <- qt(0.05/2, df = short_3syll_meanf0_means$count - 1)
short_3syll_meanf0_means$moe <- short_3syll_meanf0_means$tval * short_3syll_meanf0_means$se * -1
short_3syll_meanf0_means$upper <- short_3syll_meanf0_means$mean + short_3syll_meanf0_means$moe
short_3syll_meanf0_means$lower <- short_3syll_meanf0_means$mean - short_3syll_meanf0_means$moe
short_4syll_meanf0_means = short_4syll_meanf0 %>%
group_by(syllable_number) %>%
summarise(mean = mean(meanf0),
sd = sd(meanf0),
count = n())
short_4syll_meanf0_means$se <- short_4syll_meanf0_means$sd / sqrt(short_4syll_meanf0_means$count)
short_4syll_meanf0_means$tval <- qt(0.05/2, df = short_4syll_meanf0_means$count - 1)
short_4syll_meanf0_means$moe <- short_4syll_meanf0_means$tval * short_4syll_meanf0_means$se * -1
short_4syll_meanf0_means$upper <- short_4syll_meanf0_means$mean + short_4syll_meanf0_means$moe
short_4syll_meanf0_means$lower <- short_4syll_meanf0_means$mean - short_4syll_meanf0_means$moe
## 2-syllable words with just short vowels, meanf0
# Stats
short_2syll_meanf0$syllable_number <- as.factor(short_2syll_meanf0$syllable_number)
p <- lmer(meanf0 ~ syllable_number + (1|Speaker) + (1|word_unique),
data = short_2syll_meanf0)
summary(p)
emmeans(p, specs = pairwise ~ syllable_number)
# Plot
ggplot(data = short_2syll_meanf0_means, aes(x = syllable_number, y = mean))+
apatheme+
labs(x = "Syllable position", y = "meanf0, Hz") +
geom_violin(data = short_2syll_meanf0, aes(x = syllable_number, y = meanf0))+
geom_point(data = short_2syll_meanf0_means, aes(y = mean, x=syllable_number), size = 3) +
geom_errorbar(ymax= short_2syll_meanf0_means$upper, ymin=short_2syll_meanf0_means$lower, width = 0.5) +
scale_x_discrete(labels = label_wrap(5))
#### F0 from Praat ####
hist(short2$f0)
ggplot(short2,aes(x=f0))+geom_histogram(bins=30)+facet_grid(.~Speaker)
## Exclude outliers past 3sd from the mean internal to each person
cutoffs <- short2 %>%
group_by(Speaker) %>%
summarise(upperThreshold = mean(f0, na.rm=T) + 3*sd(f0, na.rm=T),
lowerThreshold = mean(f0, na.rm=T) - 3*sd(f0, na.rm=T))
short3 <- left_join(short2, cutoffs, by = "Speaker")
short4 <- short3 %>%
filter(f0 > lowerThreshold) %>%
filter(f0 < upperThreshold)
#  filter(Speaker != "IN") # IN f0 tracking was bad
#  filter( ! (Speaker == "DK" & f0 < 90)) # Get some bad ones from DK out, if we want? should do for others too though
ggplot(short4,aes(x=f0))+geom_histogram(bins=30)+facet_grid(.~Speaker)
short_2syll_f0 <- filter(short4, word_syllables == 2)
short_3syll_f0 <- filter(short4, word_syllables == 3)
short_4syll_f0 <- filter(short4, word_syllables == 4)
short_2syll_f0_means = short_2syll_f0 %>%
group_by(syllable_number) %>%
summarise(mean = mean(f0),
sd = sd(f0),
count = n())
short_2syll_f0_means$se <- short_2syll_f0_means$sd / sqrt(short_2syll_f0_means$count)
short_2syll_f0_means$tval <- qt(0.05/2, df = short_2syll_f0_means$count - 1)
short_2syll_f0_means$moe <- short_2syll_f0_means$tval * short_2syll_f0_means$se * -1
short_2syll_f0_means$upper <- short_2syll_f0_means$mean + short_2syll_f0_means$moe
short_2syll_f0_means$lower <- short_2syll_f0_means$mean - short_2syll_f0_means$moe
short_3syll_f0_means = short_3syll_f0 %>%
group_by(syllable_number) %>%
summarise(mean = mean(f0),
sd = sd(f0),
count = n())
short_3syll_f0_means$se <- short_3syll_f0_means$sd / sqrt(short_3syll_f0_means$count)
short_3syll_f0_means$tval <- qt(0.05/2, df = short_3syll_f0_means$count - 1)
short_3syll_f0_means$moe <- short_3syll_f0_means$tval * short_3syll_f0_means$se * -1
short_3syll_f0_means$upper <- short_3syll_f0_means$mean + short_3syll_f0_means$moe
short_3syll_f0_means$lower <- short_3syll_f0_means$mean - short_3syll_f0_means$moe
short_4syll_f0_means = short_4syll_f0 %>%
group_by(syllable_number) %>%
summarise(mean = mean(f0),
sd = sd(f0),
count = n())
short_4syll_f0_means$se <- short_4syll_f0_means$sd / sqrt(short_4syll_f0_means$count)
short_4syll_f0_means$tval <- qt(0.05/2, df = short_4syll_f0_means$count - 1)
short_4syll_f0_means$moe <- short_4syll_f0_means$tval * short_4syll_f0_means$se * -1
short_4syll_f0_means$upper <- short_4syll_f0_means$mean + short_4syll_f0_means$moe
short_4syll_f0_means$lower <- short_4syll_f0_means$mean - short_4syll_f0_means$moe
## 2-syllable words with just short vowels, f0
# Stats
short_2syll_f0$syllable_number <- as.factor(short_2syll_f0$syllable_number)
p <- lmer(f0 ~ syllable_number + (1|Speaker) + (1|word_unique),
data = short_2syll_f0)
summary(p)
emmeans(p, specs = pairwise ~ syllable_number)
# Plot
ggplot(data = short_2syll_f0_means, aes(x = syllable_number, y = mean))+
apatheme+
labs(x = "Syllable position", y = "F0, Hz") +
geom_violin(data = short_2syll_f0, aes(x = syllable_number, y = f0))+
geom_point(data = short_2syll_f0_means, aes(y = mean, x=syllable_number), size = 3) +
geom_errorbar(ymax= short_2syll_f0_means$upper, ymin=short_2syll_f0_means$lower, width = 0.5) +
scale_x_discrete(labels = label_wrap(5))
## 3-syllable words with just short vowels, f0
# Stats
short_3syll_f0$syllable_number <- as.factor(short_3syll_f0$syllable_number)
p <- lmer(f0 ~ syllable_number + (1|Speaker) + (1|word_unique),
data = short_3syll_f0)
summary(p)
emmeans(p, specs = pairwise ~ syllable_number)
# Plot
ggplot(data = short_3syll_f0_means, aes(x = syllable_number, y = mean))+
apatheme+
labs(x = "Syllable position", y = "F0, Hz") +
geom_violin(data = short_3syll_f0, aes(x = syllable_number, y = f0))+
geom_point(data = short_3syll_f0_means, aes(y = mean, x=syllable_number), size = 3) +
geom_errorbar(ymax= short_3syll_f0_means$upper, ymin=short_3syll_f0_means$lower, width = 0.5) +
scale_x_discrete(labels = label_wrap(5))
## 4-syllable words with just short vowels, f0
# Stats
short_4syll_f0$syllable_number <- as.factor(short_4syll_f0$syllable_number)
p <- lmer(f0 ~ syllable_number + (1|Speaker) + (1|word_unique),
data = short_4syll_f0)
summary(p)
emmeans(p, specs = pairwise ~ syllable_number)
# Plot
ggplot(data = short_4syll_f0_means, aes(x = syllable_number, y = mean))+
apatheme+
labs(x = "Syllable position", y = "F0, Hz") +
geom_violin(data = short_4syll_f0, aes(x = syllable_number, y = f0))+
geom_point(data = short_4syll_f0_means, aes(y = mean, x=syllable_number), size = 3) +
geom_errorbar(ymax= short_4syll_f0_means$upper, ymin=short_4syll_f0_means$lower, width = 0.8) +
scale_x_discrete(labels = label_wrap(5))
## 4-syllable words with just short vowels, meanf0
# Stats
short_4syll_meanf0$syllable_number <- as.factor(short_4syll_meanf0$syllable_number)
p <- lmer(meanf0 ~ syllable_number + (1|Speaker) + (1|word_unique),
data = short_4syll_meanf0)
summary(p)
emmeans(p, specs = pairwise ~ syllable_number)
# Plot
ggplot(data = short_4syll_meanf0_means, aes(x = syllable_number, y = mean))+
apatheme+
labs(x = "Syllable position", y = "meanf0, Hz") +
geom_violin(data = short_4syll_meanf0, aes(x = syllable_number, y = meanf0))+
geom_point(data = short_4syll_meanf0_means, aes(y = mean, x=syllable_number), size = 3) +
geom_errorbar(ymax= short_4syll_meanf0_means$upper, ymin=short_4syll_meanf0_means$lower, width = 0.8) +
scale_x_discrete(labels = label_wrap(5))
emmeans(p, specs = pairwise ~ syllable_number)
## 4-syllable words with just short vowels, meanf0
# Stats
short_4syll_meanf0$syllable_number <- as.factor(short_4syll_meanf0$syllable_number)
p <- lmer(meanf0 ~ syllable_number + (1|Speaker) + (1|word_unique),
data = short_4syll_meanf0)
summary(p)
emmeans(p, specs = pairwise ~ syllable_number)
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("mahal_overlap.R") ## functions that will be needed
source("ggplot2_trajectory_functions.R") ## functions that will be needed
source("calculating_exclusions.R")
data_allspeakers <- data
##### Set the speaker #####
data <- data_allspeakers %>%
filter(Speaker=="DK")
t <- data %>%
ungroup() %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
t <- data %>%
ungroup() %>%
filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
## Run the plotting prep script
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("plotting_preparation.R")
## Set directory for plots and tables to be saved into that matches the speaker selected
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/DK/R_outputs")
#### LAILA, MAIKAI, KAIK- ####
ai <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ai")
ei <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ei")
laila <- data %>%
filter(word == "laila") %>%
filter(vowel == "ai") %>%
arrange(time)
laila$vowel <- "laila"
laila_means <- get_vowel_primary_secondary(laila,"laila")
maikai <- data %>%
filter(maikai==1) %>%
filter(vowel=="ai") %>%
arrange(time)
maikai$vowel <- "maikai"
maikai_means <- get_vowel_primary_secondary(maikai,"maikai")
kaika <- data %>%
filter(kaika == 1) %>%
filter(vowel == "ai") %>%
arrange(time)
kaika$vowel <- "kaik-"
kaika_means <- get_vowel_primary_secondary(kaika,"kaik-")
means <- rbind(ai, ei, laila_means, maikai_means,kaika_means)
my_colors <- c("#E69F00", "#009E73", "#D55E00", "#0072B2","#56B4E9")
plot <- traj_means(means, "Speaker DK: Selected words compared to /ei/ and /ai/, means")
direct.label(plot, list("bottom.points", cex=2))
## Laila tokens
plot <- traj_means_tokens(means,laila, "Speaker DK: Laila tokens and selected /ei/ and /ai/ means")
direct.label(plot, list("bottom.points", cex=2))
View(laila)
##### Set the speaker #####
data <- data_allspeakers %>%
filter(Speaker=="JM")
t <- data %>%
ungroup() %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
t <- data %>%
ungroup() %>%
filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
## Run the plotting prep script
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("plotting_preparation.R")
## Set directory for plots and tables to be saved into that matches the speaker selected
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/JM/R_outputs")
my_colors <- c("#009E73", "#0072B2", "#009E73", "#0072B2", "#009E73", "#0072B2", "#009E73", "#0072B2", "#009E73", "#0072B2") # 10
#### LAILA, MAIKAI, KAIK- ####
ai <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ai")
ei <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ei")
laila <- data %>%
filter(word == "laila") %>%
filter(vowel == "ai") %>%
arrange(time)
laila$vowel <- "laila"
laila_means <- get_vowel_primary_secondary(laila,"laila")
maikai <- data %>%
filter(maikai==1) %>%
filter(vowel=="ai") %>%
arrange(time)
maikai$vowel <- "maikai"
maikai_means <- get_vowel_primary_secondary(maikai,"maikai")
kaika <- data %>%
filter(kaika == 1) %>%
filter(vowel == "ai") %>%
arrange(time)
kaika$vowel <- "kaik-"
kaika_means <- get_vowel_primary_secondary(kaika,"kaik-")
means <- rbind(ai, ei, laila_means, maikai_means,kaika_means)
my_colors <- c("#E69F00", "#009E73", "#D55E00", "#0072B2","#56B4E9")
plot <- traj_means(means, "Speaker JM: Selected words compared to /ei/ and /ai/, means")
direct.label(plot, list("bottom.points", cex=2))
View(laila)
View(laila)
##### Set the speaker #####
data <- data_allspeakers %>%
filter(Speaker=="AA")
t <- data %>%
ungroup() %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
t <- data %>%
ungroup() %>%
filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
## Run the plotting prep script
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("plotting_preparation.R")
#### LAILA, MAIKAI, KAIK- ####
ai <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ai")
ei <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ei")
laila <- data %>%
filter(word == "laila") %>%
filter(vowel == "ai") %>%
arrange(time)
laila$vowel <- "laila"
laila_means <- get_vowel_primary_secondary(laila,"laila")
maikai <- data %>%
filter(maikai==1) %>%
filter(vowel=="ai") %>%
arrange(time)
maikai$vowel <- "maikai"
maikai_means <- get_vowel_primary_secondary(maikai,"maikai")
kaika <- data %>%
filter(kaika == 1) %>%
filter(vowel == "ai") %>%
arrange(time)
my_colors <- c("#E69F00", "#009E73", "#D55E00", "#0072B2","#56B4E9")
means <- rbind(ai, ei, laila_means, maikai_means,kaika_means)
plot <- traj_means(means, "Speaker AA: Selected words compared to /ei/ and /ai/, means")
kaika$vowel <- "kaik-"
direct.label(plot2, list("bottom.points", cex=2))
kaika_means <- get_vowel_primary_secondary(kaika,"kaik-")
direct.label(plot, list("bottom.points", cex=2))
## Laila tokens
plot <- traj_means_tokens(means,laila, "Speaker AA: Laila tokens and selected /ei/ and /ai/ means")
direct.label(plot, list("bottom.points", cex=2))
##### Set the speaker #####
data <- data_allspeakers %>%
filter(Speaker=="SB")
t <- data %>%
ungroup() %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
t <- data %>%
ungroup() %>%
filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
## Run the plotting prep script
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
#### LAILA, MAIKAI, KAIK- ####
ai <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ai")
ei <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ei")
laila <- data %>%
filter(word == "laila") %>%
filter(vowel == "ai") %>%
arrange(time)
laila$vowel <- "laila"
laila_means <- get_vowel_primary_secondary(laila,"laila")
maikai <- data %>%
filter(maikai==1) %>%
filter(vowel=="ai") %>%
arrange(time)
maikai$vowel <- "maikai"
maikai_means <- get_vowel_primary_secondary(maikai,"maikai")
kaika <- data %>%
filter(kaika == 1) %>%
filter(vowel == "ai") %>%
arrange(time)
kaika$vowel <- "kaik-"
kaika_means <- get_vowel_primary_secondary(kaika,"kaik-")
means <- rbind(ai, ei, laila_means, maikai_means,kaika_means)
my_colors <- c("#E69F00", "#009E73", "#D55E00", "#0072B2","#56B4E9")
plot <- traj_means(means, "Speaker SB: Selected words compared to /ei/ and /ai/, means")
direct.label(plot, list("bottom.points", cex=2))
## Laila tokens
plot <- traj_means_tokens(means,laila, "Speaker SB: Laila tokens and selected /ei/ and /ai/ means")
direct.label(plot, list("bottom.points", cex=2))
##### Set the speaker #####
data <- data_allspeakers %>%
filter(Speaker=="LV")
t <- data %>%
ungroup() %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
t <- data %>%
ungroup() %>%
filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
## Run the plotting prep script
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("plotting_preparation.R")
## Laila tokens
plot <- traj_means_tokens(means,laila, "Speaker LV: Laila tokens and selected /ei/ and /ai/ means")
direct.label(plot, list("bottom.points", cex=2))
View(omit)
View(laila)
##### Set the speaker #####
data <- data_allspeakers %>%
filter(Speaker=="LV")
## Run the plotting prep script
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("plotting_preparation.R")
#### LAILA, MAIKAI, KAIK- ####
ai <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ai")
ei <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ei")
laila <- data %>%
filter(word == "laila") %>%
filter(vowel == "ai") %>%
arrange(time)
laila$vowel <- "laila"
laila_means <- get_vowel_primary_secondary(laila,"laila")
maikai <- data %>%
filter(maikai==1) %>%
filter(vowel=="ai") %>%
arrange(time)
maikai$vowel <- "maikai"
maikai_means <- get_vowel_primary_secondary(maikai,"maikai")
kaika <- data %>%
filter(kaika == 1) %>%
filter(vowel == "ai") %>%
arrange(time)
kaika$vowel <- "kaik-"
kaika_means <- get_vowel_primary_secondary(kaika,"kaik-")
means <- rbind(ai, ei, laila_means, maikai_means,kaika_means)
my_colors <- c("#E69F00", "#009E73", "#D55E00", "#0072B2","#56B4E9")
## Laila tokens
plot <- traj_means_tokens(means,laila, "Speaker LV: Laila tokens and selected /ei/ and /ai/ means")
direct.label(plot, list("bottom.points", cex=2))
##### Set the speaker #####
data <- data_allspeakers %>%
filter(Speaker=="IN")
## Run the plotting prep script
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("plotting_preparation.R")
#### LAILA, MAIKAI, KAIK- ####
ai <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ai")
ei <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ei")
laila <- data %>%
filter(word == "laila") %>%
filter(vowel == "ai") %>%
arrange(time)
laila$vowel <- "laila"
laila_means <- get_vowel_primary_secondary(laila,"laila")
maikai <- data %>%
filter(maikai==1) %>%
filter(vowel=="ai") %>%
arrange(time)
maikai$vowel <- "maikai"
maikai_means <- get_vowel_primary_secondary(maikai,"maikai")
means <- rbind(ai, ei, laila_means, maikai_means)
my_colors <- c("#E69F00", "#009E73", "#D55E00", "#0072B2") # 4
plot <- traj_means(means, "Speaker IN: Selected words compared to /ei/ and /ai/, means")
direct.label(plot, list("bottom.points", cex=2))
## Laila tokens
plot <- traj_means_tokens(means,laila, "Speaker IN: Laila tokens and selected /ei/ and /ai/ means")
direct.label(plot, list("bottom.points", cex=2))
my_colors <- c("#E69F00", "#009E73", "#0072B2", "#56B4E9") # 4
plot <- traj_means(means, "Speaker IN: Selected words compared to /ei/ and /ai/, means")
direct.label(plot, list("bottom.points", cex=2))
## Laila tokens
plot <- traj_means_tokens(means,laila, "Speaker IN: Laila tokens and selected /ei/ and /ai/ means")
direct.label(plot, list("bottom.points", cex=2))
##### Set the speaker #####
data <- data_allspeakers %>%
filter(Speaker=="DK")
## Run the plotting prep script
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("plotting_preparation.R")
## Set directory for plots and tables to be saved into that matches the speaker selected
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/DK/R_outputs")
#### LAILA, MAIKAI, KAIK- ####
ai <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ai")
ei <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ei")
laila <- data %>%
filter(word == "laila") %>%
filter(vowel == "ai") %>%
arrange(time)
laila$vowel <- "laila"
laila_means <- get_vowel_primary_secondary(laila,"laila")
maikai <- data %>%
filter(maikai==1) %>%
filter(vowel=="ai") %>%
arrange(time)
maikai$vowel <- "maikai"
maikai_means <- get_vowel_primary_secondary(maikai,"maikai")
kaika <- data %>%
filter(kaika == 1) %>%
filter(vowel == "ai") %>%
arrange(time)
kaika$vowel <- "kaik-"
kaika_means <- get_vowel_primary_secondary(kaika,"kaik-")
means <- rbind(ai, ei, laila_means, maikai_means,kaika_means)
my_colors <- c("#E69F00", "#009E73", "#D55E00", "#0072B2","#56B4E9")
## Maikai tokens
plot <- traj_means_tokens(means,maikai, "Speaker DK: Maikaʻi tokens and selected /ei/ and /ai/ means")
direct.label(plot, list("bottom.points", cex=2))
ggsave("DK_maikai_traj.png", height = 8, width = 8, units = "in")
View(maikai)
