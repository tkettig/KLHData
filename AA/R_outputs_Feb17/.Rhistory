filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ai")
ei <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ei")
laila <- data %>%
filter(word == "laila")
laila$vowel <- "laila"
laila_means <- get_vowel_primary_secondary(laila,"laila")
maikai <- data %>%
filter(word == "maikaʻi" | word == "maitaʻi")
maikai$vowel <- "maikai"
maikai_means <- get_vowel_primary_secondary(maikai,"maikai")
means <- rbind(ai, ei, laila_means, maikai_means)
my_colors <- c("orangered3", "darkblue", "seagreen4", "darkorchid1")
traj_means(means, "laila and maikaʻi compared to /ei/ and /ai/, means")
# Save the plot
ggsave("laila_maikai_means.png", height = 8, width = 8, units = "in")
ai <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ai")
ei <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ei")
laila <- data %>%
filter(word == "laila")
laila$vowel <- "laila"
laila_means <- get_vowel_primary_secondary(laila,"laila")
maikai <- data %>%
filter(word == "maikaʻi" | word == "maitaʻi")
maikai$vowel <- "maikai"
maikai_means <- get_vowel_primary_secondary(maikai,"maikai")
means <- rbind(ai, ei, laila_means, maikai_means)
my_colors <- c("orangered3", "darkblue", "seagreen4", "darkorchid1")
traj_means(means, "laila and maikaʻi compared to /ei/ and /ai/ primary and secondary, means")
# Save the plot
ggsave("laila_maikai_means.png", height = 8, width = 8, units = "in")
# means and tokens together
ggplot() +
geom_path(data = means, aes(f2, f1, color=vowel), arrow = arrow(), size = 1, alpha = 1)+
geom_path(data = laila, aes(f2, f1, group=filename, color=vowel), arrow = arrow(), size=0.2, alpha=0.8)+
geom_path(data = maikai, aes(f2, f1, group=filename, color=vowel), arrow = arrow(), size=0.2, alpha=0.8)+
scale_color_manual(values=my_colors) +
labs(title = "laila and maikaʻi compared to /ei/ and /ai/ primary and secondary, means and tokens", x = "F2", y = "F1") +
theme_classic() +
theme(legend.title=element_blank(), plot.title = element_text(hjust = 0.5)) +
scale_y_reverse()+
scale_x_reverse()
# Save the plot
ggsave("laila_maikai.png", height = 8, width = 8, units = "in")
?starts_with
library(tidyverse)
library(reshape2)
## Gonna give myself two types of negated %in% here
`%!in%` = Negate(`%in%`)
`%notin%` <- Negate(`%in%`)
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
# Then load in the data
source("load_speaker/AA_data.R")
source("load_speaker/DK_data.R")
source("load_speaker/HM_data.R")
source("load_speaker/IN_data.R")
source("load_speaker/JM_data.R")
source("load_speaker/LV_data.R")
source("load_speaker/RM_data.R")
source("load_speaker/SB_data.R")
# Bind them all together
data <- rbind(AA,DK,HM,IN,JM,LV,RM,SB) %>% select(-comment2)
##### Add in frequency info ######
freq <- read.csv("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/frequencies.csv", header=TRUE, stringsAsFactors=FALSE)
names(freq)[1] <- "rank"
names(freq)[2] <- "word"
data <- left_join(data, freq, by="word")
###### Label speakers #######
data$Speaker <- ifelse(grepl("KLH016", data$filename),"JM",
ifelse(grepl("KLH032", data$filename),"LV",
ifelse(grepl("KLH013", data$filename),"IN",
ifelse(grepl("KLH021", data$filename),"HM",
ifelse(grepl("KLH063", data$filename),"DK",
ifelse(grepl("KLH033", data$filename),"SB",
ifelse(grepl("KLH014", data$filename),"RM",
ifelse(grepl("KLH057", data$filename),"AA",
0))))))))
##### Get a token label in original order #######
data$original_order <- 1:length(data$filename)
######## Getting overall number of tokens in each vowel class #########
#
# ## Gets number of tokens per vowel
# vowel_token_freq <- as.data.frame(table(data$vowel))
# vowel_token_freq <- vowel_token_freq %>% rename(vowel = Var1)
#
#  ggplot(vowel_token_freq, aes(x=reorder(vowel,-Freq), y=Freq)) +
#   geom_bar(stat = "identity")+
#   ggtitle("Token frequency by vowel") +
#   xlab("Vowel") + ylab("Frequency")+
#   geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=-0.25)
# ## There are no observations of āe or ōu, so have to add those as 0
#
# no.āe <- data.frame("āe",0)
# names(no.āe) <- c("vowel","Freq")
# vowel_token_freq <- rbind(vowel_token_freq, no.āe)
#
# no.ōu <- data.frame("ōu",0)
# names(no.ōu) <- c("vowel","Freq")
# vowel_token_freq <- rbind(vowel_token_freq, no.ōu)
#
# ggplot(vowel_token_freq, aes(x=reorder(vowel,-Freq), y=Freq)) +
#   geom_bar(stat = "identity")+
#   ggtitle("Token frequency by vowel") +
#   xlab("Vowel") + ylab("Frequency")+
#   geom_col(aes(fill=Freq)) +
#   scale_fill_gradient(low = "white", high = "blue") +
#   theme(legend.title=element_blank(), plot.title = element_text(hjust = 0.5)) +
#   geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=-0.25)
####### Make lists of vowels/mono/diph #######
list_of_monophthongs <- c("ā","ē","ī","ō","ū","a","e","i","o","u")
list_of_diphthongs <- c("ai","au","ao","ae","ei", "ou","eu","oi","iu","āi","āe","āu","āo","ēi","ōu")
list_of_vowels <- c("ā","ē","ī","ō","ū","a","e","i","o","u","ai","au","ao","ae","ei", "ou","eu","oi","iu","āi","āe","āu","āo","ēi","ōu")
##### Make column for number of moras ######
data$Moras[data$vowel == 'a' | data$vowel == 'e' | data$vowel == 'i' | data$vowel == 'o' | data$vowel == 'u'] <- 1
data$Moras[data$vowel == 'ā' | data$vowel == 'ē' | data$vowel == 'ī' | data$vowel == 'ō' | data$vowel == 'ū'] <- 2
data$Moras[data$vowel == 'ai' | data$vowel == 'ae' | data$vowel == 'ao' | data$vowel == 'au' | data$vowel == 'oi' | data$vowel == 'ou' | data$vowel == 'ei' | data$vowel == 'eu' | data$vowel == 'iu'] <- 2
data$Moras[data$vowel == 'āi' | data$vowel == 'āē' | data$vowel == 'āu' | data$vowel == 'āō' | data$vowel == 'ōu' | data$vowel == 'ēi'] <- 3
######## Make column for diphthong status #######
data$Syllabification <- ifelse(data$vowel %in% list_of_monophthongs, "Mono", "Diph")
######## Make all silences same #######
data$previous_sound <- recode(data$previous_sound,
`-` = "sil",
sp = "sil",
sil = "sil")
data$next_sound <- recode(data$next_sound,
`-` = "sil",
sp = "sil",
sil = "sil")
data$aole <- ifelse(data$word == "ʻaʻole" | data$word == "ʻale" | data$word == "ʻaʻale" |
data$word == "ʻaʻohe" | data$word == "ʻaʻahe" | data$word == "ʻahe" |
data$word == "hope" | data$word == "hape",1, 0)
data$Kinney1956 <- ifelse(data$word == "laila" |
data$word == "ikaika" |
data$word == "maikaʻi" |
data$word == "maitaʻi"
,1, 0)
data$kaika <- ifelse(data$word == starts_with("kaika") | data$word == starts_with("kaiku"), 1, 0)
?str_detect
data <- data %>%
mutate(kaika = ifelse(str_detect(word,"kaik"), 1, 0))
View(data)
data <- data %>%
mutate(kaika = ifelse(str_detect(word,"^kaik"), 1, 0))
View(data)
library(tidyverse)
library(reshape2)
## Gonna give myself two types of negated %in% here
`%!in%` = Negate(`%in%`)
`%notin%` <- Negate(`%in%`)
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
# Then load in the data
source("load_speaker/AA_data.R")
source("load_speaker/DK_data.R")
source("load_speaker/HM_data.R")
source("load_speaker/IN_data.R")
source("load_speaker/JM_data.R")
source("load_speaker/LV_data.R")
source("load_speaker/RM_data.R")
source("load_speaker/SB_data.R")
# Bind them all together
data <- rbind(AA,DK,HM,IN,JM,LV,RM,SB) %>% select(-comment2)
##### Add in frequency info ######
freq <- read.csv("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/frequencies.csv", header=TRUE, stringsAsFactors=FALSE)
names(freq)[1] <- "rank"
names(freq)[2] <- "word"
data <- left_join(data, freq, by="word")
###### Label speakers #######
data$Speaker <- ifelse(grepl("KLH016", data$filename),"JM",
ifelse(grepl("KLH032", data$filename),"LV",
ifelse(grepl("KLH013", data$filename),"IN",
ifelse(grepl("KLH021", data$filename),"HM",
ifelse(grepl("KLH063", data$filename),"DK",
ifelse(grepl("KLH033", data$filename),"SB",
ifelse(grepl("KLH014", data$filename),"RM",
ifelse(grepl("KLH057", data$filename),"AA",
0))))))))
##### Get a token label in original order #######
data$original_order <- 1:length(data$filename)
######## Getting overall number of tokens in each vowel class #########
#
# ## Gets number of tokens per vowel
# vowel_token_freq <- as.data.frame(table(data$vowel))
# vowel_token_freq <- vowel_token_freq %>% rename(vowel = Var1)
#
#  ggplot(vowel_token_freq, aes(x=reorder(vowel,-Freq), y=Freq)) +
#   geom_bar(stat = "identity")+
#   ggtitle("Token frequency by vowel") +
#   xlab("Vowel") + ylab("Frequency")+
#   geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=-0.25)
# ## There are no observations of āe or ōu, so have to add those as 0
#
# no.āe <- data.frame("āe",0)
# names(no.āe) <- c("vowel","Freq")
# vowel_token_freq <- rbind(vowel_token_freq, no.āe)
#
# no.ōu <- data.frame("ōu",0)
# names(no.ōu) <- c("vowel","Freq")
# vowel_token_freq <- rbind(vowel_token_freq, no.ōu)
#
# ggplot(vowel_token_freq, aes(x=reorder(vowel,-Freq), y=Freq)) +
#   geom_bar(stat = "identity")+
#   ggtitle("Token frequency by vowel") +
#   xlab("Vowel") + ylab("Frequency")+
#   geom_col(aes(fill=Freq)) +
#   scale_fill_gradient(low = "white", high = "blue") +
#   theme(legend.title=element_blank(), plot.title = element_text(hjust = 0.5)) +
#   geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=-0.25)
####### Make lists of vowels/mono/diph #######
list_of_monophthongs <- c("ā","ē","ī","ō","ū","a","e","i","o","u")
list_of_diphthongs <- c("ai","au","ao","ae","ei", "ou","eu","oi","iu","āi","āe","āu","āo","ēi","ōu")
list_of_vowels <- c("ā","ē","ī","ō","ū","a","e","i","o","u","ai","au","ao","ae","ei", "ou","eu","oi","iu","āi","āe","āu","āo","ēi","ōu")
##### Make column for number of moras ######
data$Moras[data$vowel == 'a' | data$vowel == 'e' | data$vowel == 'i' | data$vowel == 'o' | data$vowel == 'u'] <- 1
data$Moras[data$vowel == 'ā' | data$vowel == 'ē' | data$vowel == 'ī' | data$vowel == 'ō' | data$vowel == 'ū'] <- 2
data$Moras[data$vowel == 'ai' | data$vowel == 'ae' | data$vowel == 'ao' | data$vowel == 'au' | data$vowel == 'oi' | data$vowel == 'ou' | data$vowel == 'ei' | data$vowel == 'eu' | data$vowel == 'iu'] <- 2
data$Moras[data$vowel == 'āi' | data$vowel == 'āē' | data$vowel == 'āu' | data$vowel == 'āō' | data$vowel == 'ōu' | data$vowel == 'ēi'] <- 3
######## Make column for diphthong status #######
data$Syllabification <- ifelse(data$vowel %in% list_of_monophthongs, "Mono", "Diph")
######## Make all silences same #######
data$previous_sound <- recode(data$previous_sound,
`-` = "sil",
sp = "sil",
sil = "sil")
data$next_sound <- recode(data$next_sound,
`-` = "sil",
sp = "sil",
sil = "sil")
###### DEALING WITH WORDS TO EXCLUDE ########
####### Make "aole type" coluumn for variants of ʻaʻole (except ʻole), ʻaʻohe (except ʻohe), and hope/hape #######
data$aole <- ifelse(data$word == "ʻaʻole" | data$word == "ʻale" | data$word == "ʻaʻale" |
data$word == "ʻaʻohe" | data$word == "ʻaʻahe" | data$word == "ʻahe" |
data$word == "hope" | data$word == "hape",1, 0)
####### Make column for words noted by Kinney (1956) as having over 50% "changed" pronunciation. ########
data$Kinney1956 <- ifelse(data$word == "laila" |
data$word == "ikaika" |
data$word == "maikaʻi" |
data$word == "maitaʻi"
,1, 0)
####### Make column for kaika- or kaiku- words ######
data <- data %>%
mutate(kaika = ifelse(str_detect(word,"^kaika")|str_detect(word,"^kaiku"), 1, 0))
data$articles <- ifelse(data$word == "ka" |
data$word == "ke" |
data$word == "kekahi" |
data$word == "kahi" |
data$word == "ta" |
data$word == "te" |
data$word == "nā"
,1, 0)
data$demons <- ifelse(data$word == "kēia" |
data$word == "kēlā" |
data$word == "kēnā"|
data$word == "tēia" |
data$word == "tēlā" |
data$word == "tēnā"|
data$word == "pēia" |
data$word == "pēlā" |
data$word == "pēnā" |
data$word == "pēnei"
,1, 0)
data$particles <- ifelse(data$word == "nō" |
data$word == "paha" |
data$word == "hoʻi" |
data$word == "wale"
,1, 0)
data$directionals <- ifelse(data$word == "mai" |
data$word == "aku" |
data$word == "aʻe" |
data$word == "iho" |
data$word == "ala" |
data$word == "maila" |
data$word == "akula" |
data$word == "aʻela" |
data$word == "ihola" |
data$word == "nei"
,1, 0)
data$pronouns <- ifelse(data$word == "au" |
data$word == "wau" |
data$word == "ʻoe" |
data$word == "ia" |
data$word == "māua" |
data$word == "mākou" |
data$word == "kāua" |
data$word == "kākou" |
data$word == "ʻolua" |
data$word == "ʻoukou" |
data$word == "lāua" |
data$word == "lākou" |
data$word == "koʻu" |
data$word == "kou" |
data$word == "kāu" |
data$word == "kaʻu" |
data$word == "kuʻu" |
data$word == "kona" |
data$word == "kāna" |
data$word == "aʻu" |
data$word == "āu" |
data$word == "āna" |
data$word == "oʻu" |
data$word == "ou" |
data$word == "ona" |
data$word == "naʻu" |
data$word == "nāu" |
data$word == "nāna" |
data$word == "noʻu" |
data$word == "nou" |
data$word == "nona" |
data$word == "iaʻu" |
data$word == "iā"
,1, 0)
data$interrogatives <- ifelse(data$word == "aha" |
data$word == "hea" |
data$word == "pehea"
,1, 0) # I donʻt do more of them because the others are relatively rare or wai, which has content word associated with it
data$funct <- ifelse(data$word == "a" |
data$word == "o" |
data$word == "ā" |
data$word == "me" |
data$word == "i" |
data$word == "nō" |
data$word == "ʻo" |
data$word == "e" |
data$word == "ma" |
data$word == "he" |
data$word == "inā" |
data$word == "ua" |
data$word == "ʻia" |
data$word == "no" |
data$word == "ʻana" |
data$word == "ana" |
data$word == "ai" |
data$word == "mau" |
data$word == "aia"|
data$word == "eia" |
data$word == "no" |
data$word == "na" |
data$word == "ko" |
data$word == "kā"
,1, 0)
data$manawa <- ifelse(data$word == "manawa"
,1, 0)
data$mea <- ifelse(data$word == "mea"
,1, 0)
data$ae <- ifelse(data$word == "ʻae"|
data$word =="ʻē"|
data$word == "ʻeā"
,1, 0)
####### Make column for stress #######
data$stress <- ifelse(data$Moras > 1,                                                                        # For long vowels and diphthongs,
ifelse(data$end == data$word_end,                                                      # if it's at the end of the word,
"primary",                                                                      # it's primary. Otherwise,
ifelse(data$word_end == lead(data$end, 1) & lead(data$Moras, 1) == 1,           # if it's the 2nd to last and last is short, then
"primary",                                                               # it's primary. Otherwise,
"secondary")),                                                           # it's secondary.
ifelse(data$end == data$word_end,                                                      # For short vowels, if it's at end of word,
"unstressed",                                                                   # it's unstressed.
ifelse(data$word_end == lead(data$end, 1),                                      # If it's 2nd to last, then
ifelse(lead(data$Moras, 1) == 1,                                         # if the last one is short, then
"primary",                                                        # it's primary, otherwise
"unstressed"),                                                   # it's unstressed, otherwise
ifelse(data$word_end == lead(data$end, 2),                                      # If it's 3rd to last, then
ifelse(lead(data$Moras, 2) > 1 & lead(data$Moras, 1) == 1,               # if the last one is long and the 2nd to last is short,
"secondary",                                                      # it's secondary, otherwise
"unstressed"),                                                   # it's unstressed.
ifelse(data$word_end == lead(data$end, 3) & data$word_end != lag(data$word_end, 1),      # If it's the 4th to last AND it's the first syllable of the word, then
ifelse(lead(data$Moras, 1) == 1,                                                  # if the 3rd to last is short, then
"secondary",                                                           # it's secondary, otherwise
"unstressed"),                                                         # it's unstressed.
0)
)
)
)
)
check <- dplyr::select(data, c("filename","start","vowel","word","Moras","Syllabification","stress"))
####### Make column for following vowel #######
data$following_vowel <- ifelse(data$next_sound == "sil","sil", lead(data$vowel))
data$previous_vowel <- ifelse(data$previous_sound == "sil","sil", lag(data$vowel))
######## Rename formant columns to make splitting easier ########
data <- data %>% rename_at(vars(starts_with("f1")), funs(str_replace(., "f1", "f1.")))
data <- data %>% rename_at(vars(starts_with("f2")), funs(str_replace(., "f2", "f2.")))
data <- data %>% rename_at(vars(starts_with("f3")), funs(str_replace(., "f3", "f3.")))
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("data_preparation.R")
source("reselect_winners.R")
library(joeyr)
######## EXCLUSIONS AND FILTERING ############
## Adding to the omit column any of the tokens that I've marked to omit while investigating outliers
## (Note: This can be run even if the outlier investigation has not been done yet for a particular speaker)
data$omit <- ifelse(data$filename %in% list_to_omit_LV |
data$filename %in% list_to_omit_IN |
data$filename %in% list_to_omit_HM |
data$filename %in% list_to_omit_JM |
data$filename %in% list_to_omit_SB |
data$filename %in% list_to_omit_DK |
data$filename %in% list_to_omit_RM  , 1, data$omit)
## Taking out tokens that should be omitted
filtered <- data %>% filter(omit == 0)
## Recoding the ones that could be o/a as oa
filtered$vowel <- ifelse(filtered$aole==1 | filtered$aohe==1 | filtered$hope==1,
ifelse(filtered$stress=="primary","oa", filtered$vowel), filtered$vowel)
### Taking out just articles, particles, function words, demonstratives, interrogatives, mea, manawa
### Leaving in pronouns, ʻae, directionals because I may want to include those in later calculations to beef up
### some vowel categories, and would be better to maybe exclude outliers at this point?
filtered <- filtered %>% filter(articles == 0,
particles == 0,
funct == 0,
demons == 0,
interrogatives == 0,
mea == 0,
manawa == 0)
### Gets number of tokens per vowel
vowel_token_freq <- as.data.frame(table(filtered$vowel))
vowel_token_freq <- vowel_token_freq %>% rename(vowel = Var1)
ggplot(vowel_token_freq, aes(x=reorder(vowel,-Freq), y=Freq)) +
geom_bar(stat = "identity")+
ggtitle("Token frequency by vowel") +
xlab("Vowel") + ylab("Frequency")+
geom_text(aes(label=Freq), position=position_dodge(width=0.9), vjust=-0.25)
######### SPREADING DATA INTO TALL FORMAT #########
## Get a spread dataset for things that require long form data, like trajectories
datagather <- filtered %>% gather(Formant.Time, Hertz, f1.1:f3.9)
datagather <- data.frame(datagather, reshape2::colsplit(datagather$Formant.Time, pattern="\\.", names = c("formant", "time")))
datagather <- datagather[,names(datagather) != "Formant.Time"]
dataspread <- datagather %>% spread(formant, Hertz)
## Adding a column for mahalanobis distance
dataspread <- dataspread %>% group_by(Speaker) %>% group_by(vowel) %>% mutate(mahal_dist = tidy_mahalanobis(f1, f2))
## Going to rearrange data by mahal distance for each speaker
LV <- dataspread %>% filter(Speaker == "LV") %>% arrange(mahal_dist)
HM <- dataspread %>% filter(Speaker == "HM") %>% arrange(mahal_dist)
IN <- dataspread %>% filter(Speaker == "IN") %>% arrange(mahal_dist)
JM <- dataspread %>% filter(Speaker == "JM") %>% arrange(mahal_dist)
SB <- dataspread %>% filter(Speaker == "SB") %>% arrange(mahal_dist)
DK <- dataspread %>% filter(Speaker == "DK") %>% arrange(mahal_dist)
RM <- dataspread %>% filter(Speaker == "RM") %>% arrange(mahal_dist)
AA <- dataspread %>% filter(Speaker == "AA") %>% arrange(mahal_dist)
View(RM)
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("ggplot2_trajectory_functions.R")
source("data_preparation.R")
source("calculating_exclusions.R")
data <- AA
source("plotting_preparation.R")
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/R_outputs")
ai <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ai")
ei <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ei")
kaika <- data %>%
filter(kaika == 1)
kaika$vowel <- "kaik-"
kaika$vowel <- "kaik-"
kaika_means <- get_vowel_primary_secondary(kaika,"kaik-")
means <- rbind(ai, ei, kaika_means)
my_colors <- c("orangered3", "darkblue", "seagreen4")
traj_means(means, "kaik- words compared to /ei/ and /ai/ primary and secondary, means")
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/R_outputs")
traj_means(means, "kaik- words compared to /ei/ and /ai/ primary and secondary, means")
# Save the plot
ggsave("kaika_means.png", height = 8, width = 8, units = "in")
t <- kaika %>%
ungroup() %>%
select(word,filename) %>%
distinct() %>%
group_by(word) %>%
summarise(tokens = n())
t
# Save the table
write.table(t, file = "kaika.txt", sep = ",", quote = FALSE, row.names = F)
# means and tokens together
ggplot() +
geom_path(data = means, aes(f2, f1, color=vowel), arrow = arrow(), size = 1, alpha = 1)+
geom_path(data = kaika, aes(f2, f1, group=filename, color=vowel), arrow = arrow(), size=0.2, alpha=0.8)+
scale_color_manual(values=my_colors) +
labs(title = "kaik- words compared to /ei/ and /ai/ primary and secondary, means and tokens", x = "F2", y = "F1") +
theme_classic() +
theme(legend.title=element_blank(), plot.title = element_text(hjust = 0.5)) +
scale_y_reverse()+
scale_x_reverse()
# means and tokens together
ggplot() +
geom_path(data = means, aes(f2, f1, color=vowel), arrow = arrow(), size = 1, alpha = 1)+
geom_path(data = kaika, aes(f2, f1, group=filename, color=word), arrow = arrow(), size=0.2, alpha=0.8)+
scale_color_manual(values=my_colors) +
labs(title = "kaik- words compared to /ei/ and /ai/ primary and secondary, means and tokens", x = "F2", y = "F1") +
theme_classic() +
theme(legend.title=element_blank(), plot.title = element_text(hjust = 0.5)) +
scale_y_reverse()+
scale_x_reverse()
my_colors <- c("orangered3", "darkblue", "seagreen4", "grey40", "darksalmon")
# means and tokens together
ggplot() +
geom_path(data = means, aes(f2, f1, color=vowel), arrow = arrow(), size = 1, alpha = 1)+
geom_path(data = kaika, aes(f2, f1, group=filename, color=word), arrow = arrow(), size=0.2, alpha=0.8)+
scale_color_manual(values=my_colors) +
labs(title = "kaik- words compared to /ei/ and /ai/ primary and secondary, means and tokens", x = "F2", y = "F1") +
theme_classic() +
theme(legend.title=element_blank(), plot.title = element_text(hjust = 0.5)) +
scale_y_reverse()+
scale_x_reverse()
