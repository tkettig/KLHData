# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
# Write back to where it needs to be in the folder
# write.csv(winners, "/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/output/winners.csv", row.names = F, quote = F)
library(joeyr)
## Assigning a list of problematic adjacent consonants
problematic_consonants <- c("Ê»","w","h")
## Getting a column unique to each word
data$word_unique <- paste(data$word, data$word_start, sep="")
data2 <- data %>%
select(word_unique) %>%
group_by(word_unique) %>%
summarise(word_syllables = length(word_unique))
data <- left_join(data, data2, by="word_unique")
data$omit <- ifelse(data$filename %in% list_to_omit_LV |
data$filename %in% list_to_omit_IN |
data$filename %in% list_to_omit_HM |
data$filename %in% list_to_omit_JM |
data$filename %in% list_to_omit_SB |
data$filename %in% list_to_omit_DK |
data$filename %in% list_to_omit_RM |
data$filename %in% list_to_omit_AA , 1, data$omit)
filtered <- data %>% filter(omit == 0)
filtered$vowel <- ifelse(filtered$aole==1,
ifelse(filtered$stress=="primary","oa", filtered$vowel), filtered$vowel)
filtered <- filtered %>% filter(articles == 0,
particles == 0,
funct == 0,
demons == 0,
interrogatives == 0,
mea == 0,
manawa == 0)
datagather <- filtered %>% gather(Formant.Time, Hertz, f1.1:f3.9)
datagather <- data.frame(datagather, reshape2::colsplit(datagather$Formant.Time, pattern="\\.", names = c("formant", "time")))
datagather <- datagather[,names(datagather) != "Formant.Time"]
dataspread <- datagather %>% spread(formant, Hertz)
dataspread <- dataspread %>%
group_by(Speaker) %>%
group_by(vowel) %>%
mutate(mahal_dist = tidy_mahalanobis(f1, f2))
LV <- dataspread %>% filter(Speaker == "LV") %>% arrange(mahal_dist)
HM <- dataspread %>% filter(Speaker == "HM") %>% arrange(mahal_dist)
IN <- dataspread %>% filter(Speaker == "IN") %>% arrange(mahal_dist)
JM <- dataspread %>% filter(Speaker == "JM") %>% arrange(mahal_dist)
SB <- dataspread %>% filter(Speaker == "SB") %>% arrange(mahal_dist)
DK <- dataspread %>% filter(Speaker == "DK") %>% arrange(mahal_dist)
RM <- dataspread %>% filter(Speaker == "RM") %>% arrange(mahal_dist)
AA <- dataspread %>% filter(Speaker == "AA") %>% arrange(mahal_dist)
mahal95LV <- c(LV[round(nrow(LV)*0.95),ncol(LV)])
mahal95LV
mahal95HM <- c(HM[round(nrow(HM)*0.95),ncol(HM)])
mahal95HM
mahal95IN <- c(IN[round(nrow(IN)*0.95),ncol(IN)])
mahal95IN
mahal95JM <- c(JM[round(nrow(JM)*0.95),ncol(JM)])
mahal95JM
mahal95DK <- c(DK[round(nrow(DK)*0.95),ncol(DK)])
mahal95DK
mahal95SB <- c(SB[round(nrow(SB)*0.95),ncol(SB)])
mahal95SB
mahal95RM <- c(RM[round(nrow(RM)*0.95),ncol(RM)])
mahal95RM
mahal95AA <- c(AA[round(nrow(AA)*0.95),ncol(AA)])
mahal95AA
mahal99LV <- c(LV[round(nrow(LV)*0.99),ncol(LV)])
mahal99LV
mahal99HM <- c(HM[round(nrow(HM)*0.99),ncol(HM)])
mahal99HM
mahal99IN <- c(IN[round(nrow(IN)*0.99),ncol(IN)])
mahal99IN
mahal99JM <- c(JM[round(nrow(JM)*0.99),ncol(JM)])
mahal99JM
mahal99DK <- c(DK[round(nrow(DK)*0.99),ncol(DK)])
mahal99DK
mahal99SB <- c(SB[round(nrow(SB)*0.99),ncol(SB)])
mahal99SB
mahal99RM <- c(RM[round(nrow(RM)*0.99),ncol(RM)])
mahal99RM
mahal99AA <- c(AA[round(nrow(AA)*0.99),ncol(AA)])
mahal99AA
mahal_meansLV <- LV %>% group_by(filename,vowel,word,start,stress) %>%
summarise(mahal_mean=mean(mahal_dist),mahal_median=median(mahal_dist)) %>%
arrange(desc(mahal_mean)) %>%
filter(mahal_mean > mahal95LV)
mahal_meansIN <- IN %>% group_by(filename,vowel,word,start,stress) %>%
summarise(mahal_mean=mean(mahal_dist),mahal_median=median(mahal_dist)) %>%
arrange(desc(mahal_mean)) %>%
filter(mahal_mean > mahal95IN)
mahal_meansHM <- HM %>% group_by(filename,vowel,word,start,stress) %>%
summarise(mahal_mean=mean(mahal_dist),mahal_median=median(mahal_dist)) %>%
arrange(desc(mahal_mean)) %>%
filter(mahal_mean > mahal95HM)
mahal_meansJM <- JM %>% group_by(filename,vowel,word,start,stress) %>%
summarise(mahal_mean=mean(mahal_dist),mahal_median=median(mahal_dist)) %>%
arrange(desc(mahal_mean)) %>%
filter(mahal_mean > mahal95JM)
mahal_meansDK <- DK %>% group_by(filename,vowel,word,start,stress) %>%
summarise(mahal_mean=mean(mahal_dist),mahal_median=median(mahal_dist)) %>%
arrange(desc(mahal_mean)) %>%
filter(mahal_mean > mahal95DK)
mahal_meansSB <- SB %>% group_by(filename,vowel,word,start,stress) %>%
summarise(mahal_mean=mean(mahal_dist),mahal_median=median(mahal_dist)) %>%
arrange(desc(mahal_mean)) %>%
filter(mahal_mean > mahal95SB)
mahal_meansRM <- RM %>% group_by(filename,vowel,word,start,stress) %>%
summarise(mahal_mean=mean(mahal_dist),mahal_median=median(mahal_dist)) %>%
arrange(desc(mahal_mean)) %>%
filter(mahal_mean > mahal95RM)
mahal_meansAA <- AA %>% group_by(filename,vowel,word,start,stress) %>%
summarise(mahal_mean=mean(mahal_dist),mahal_median=median(mahal_dist)) %>%
arrange(desc(mahal_mean)) %>%
filter(mahal_mean > mahal95AA)
LV <- LV %>% filter(mahal_dist < mahal99LV)
HM <- HM %>% filter(mahal_dist < mahal99HM)
IN <- IN %>% filter(mahal_dist < mahal99IN)
SB <- SB %>% filter(mahal_dist < mahal99SB)
DK <- DK %>% filter(mahal_dist < mahal99DK)
RM <- RM %>% filter(mahal_dist < mahal99RM)
AA <- AA %>% filter(mahal_dist < mahal99AA)
JM <- JM %>% filter(mahal_dist < mahal99JM)
data <- rbind(AA,DK,HM,IN,JM,LV,RM,SB)
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
data$f1 <- as.numeric(data$f1)
data$f2 <- as.numeric(data$f2)
data <- data %>% ungroup()
normed <- data %>%
group_by(Speaker) %>%
norm_anae(hz_cols = c(f1,f2), token_id = filename, speaker_id = Speaker)
normed <- normed %>% ungroup()
source("plotting_preparation_normed.R")
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/normed/R_outputs")
data1 <- data %>% filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
filter(pronouns == 0) %>%
filter(directionals == 0)
mono$vowel.stress <- paste(mono$vowel,mono$stress, sep=".")
my_colors <- c("#009E73", "#0072B2", "#009E73", "#0072B2", "#009E73", "#0072B2", "#009E73", "#0072B2", "#009E73", "#0072B2") # 10
#### Just means and ellipses
ggplot() +
stat_ellipse(data = mono_primary_secondary, aes(x = f2_inf, y = f1_inf, color = vowel), level = 0.67) +
scale_x_reverse() +
scale_y_reverse() +
theme_classic() +
scale_color_manual(values=my_colors) +
geom_text(data = mono_primary_secondary_means, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), cex=5) +
labs(title = "All speakers, normalized: Long and short vowels, inflection points", x = "F2, normalized (Hz)", y = "F1, normalized (Hz)") +
theme(legend.position = "", plot.title = element_text(hjust = 0.5))
View(mono_primary_abut)
i <- get_vowel_primary_secondary(data1,"i")
i <- get_vowel_primary_secondary(data1,"i")
e <- get_vowel_primary_secondary(data1,"e")
a <- get_vowel_primary_secondary(data1,"a")
o <- get_vowel_primary_secondary(data1,"o")
u <- get_vowel_primary_secondary(data1,"u")
View(data1)
means <- rbind(i,e,a,o,u)
tokens <- data1 %>%
filter(vowel=="i" |
vowel=="e" |
vowel=="a" |
vowel=="o" |
vowel=="u") %>%
filter(stress == "primary" |stress=="secondary") %>%
mutate(time2 = (time - 1)/8)
my_colors <- c("#000000", "#999999", "#E69F00", "#56B4E9", "#009E73") # 5
plot <- traj_means(means, "All speakers, normalized: Short monophthong trajectories")
direct.label(plot, list("bottom.points", cex=2))
#### Chapter 4: All speakers, short and long monophthongs ####
#### Plots and associated statistical models
library(lmerTest)
library(emmeans)
library(sjPlot)
library(cowplot)
library(directlabels)
set.seed(1234)
i <- get_vowel_primary_secondary(data1,"i")
e <- get_vowel_primary_secondary(data1,"e")
a <- get_vowel_primary_secondary(data1,"a")
source("mahal_overlap.R") ## functions that will be needed
source("ggplot2_trajectory_functions.R") ## functions that will be needed
i <- get_vowel_primary_secondary(data1,"i")
e <- get_vowel_primary_secondary(data1,"e")
#### Chapter 4: All speakers, short and long monophthongs ####
#### Plots and associated statistical models
library(lmerTest)
library(emmeans)
library(sjPlot)
library(cowplot)
library(directlabels)
set.seed(1234)
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/normed/R_outputs")
i <- get_vowel_primary_secondary(data1,"i")
#### Chapter 4: All speakers, short and long monophthongs ####
#### Plots and associated statistical models
library(lmerTest)
library(emmeans)
library(sjPlot)
library(cowplot)
library(directlabels)
set.seed(1234)
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("mahal_overlap.R") ## functions that will be needed
source("ggplot2_trajectory_functions.R") ## functions that will be needed
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/normed/R_outputs")
data1 <- data %>% filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
filter(pronouns == 0) %>%
filter(directionals == 0)
mono$vowel.stress <- paste(mono$vowel,mono$stress, sep=".")
i <- get_vowel_primary_secondary(data1,"i")
e <- get_vowel_primary_secondary(data1,"e")
a <- get_vowel_primary_secondary(data1,"a")
o <- get_vowel_primary_secondary(data1,"o")
u <- get_vowel_primary_secondary(data1,"u")
means <- rbind(i,e,a,o,u)
tokens <- data1 %>%
filter(vowel=="i" |
vowel=="e" |
vowel=="a" |
vowel=="o" |
vowel=="u") %>%
filter(stress == "primary" |stress=="secondary") %>%
mutate(time2 = (time - 1)/8)
my_colors <- c("#000000", "#999999", "#E69F00", "#56B4E9", "#009E73") # 5
plot <- traj_means(means, "All speakers, normalized: Short monophthong trajectories")
direct.label(plot, list("bottom.points", cex=2))
####### 4.3.2 Stress in short monophthongs #####
#### Plot ####
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/normed/R_outputs")
short <- mono %>% filter(vowel == "a" |vowel == "e" |vowel == "i" |vowel == "o" |vowel == "u")
short_means <- mono_means %>% filter(vowel == "a" |vowel == "e" |vowel == "i" |vowel == "o" |vowel == "u")
my_linetype <- c("solid", "longdash", "dotted")
my_colors <- c("#000000", "#999999", "#E69F00", "#56B4E9", "#009E73") # 5
ggplot() +
stat_ellipse(data = short, aes(x = f2_inf, y = f1_inf, group = vowel.stress, linetype = stress, color = vowel), level = 0.67) +
scale_x_reverse() + scale_y_reverse() +
geom_text(data = short_means, aes(x = mean_f2_inf, y = mean_f1_inf, color=vowel, label = vowel, fontface=2), cex=5, show.legend=F) +
theme_classic() +
scale_linetype_manual(values=my_linetype) +
scale_colour_manual(values=my_colors) +
labs(title = "All speakers, normalized: Short monophthongs by stress", x = "F2, normalized (Hz)", y = "F1, normalized (Hz)") +
theme(plot.title = element_text(hjust = 0.5)) +
guides(colour=FALSE)
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/normed/R_outputs")
p <- plot_model(a_stress_f1,
type = "re",
title = " ")
plot_grid( p[[5]],p[[4]], labels = c('Previous consonant','Following consonant'))
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/normed/R_outputs")
data1 <- data %>% filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
filter(pronouns == 0) %>%
filter(directionals == 0)
data2 <- data %>% filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0)
short <- mono %>% filter(vowel == "a" |vowel == "e" |vowel == "i" |vowel == "o" |vowel == "u")
short_means <- mono_means %>% filter(vowel == "a" |vowel == "e" |vowel == "i" |vowel == "o" |vowel == "u")
a_stress <- short %>% filter(vowel=="a") %>% filter(next_sound != "t",previous_sound != "t")
e_stress <- short %>% filter(vowel=="e") %>% filter(next_sound != "t",previous_sound != "t")
i_stress <- short %>% filter(vowel=="i") %>% filter(next_sound != "t",previous_sound != "t")
o_stress <- short %>% filter(vowel=="o") %>% filter(next_sound != "t",previous_sound != "t")
u_stress <- short %>% filter(vowel=="u") %>% filter(next_sound != "t",previous_sound != "t")
au <- get_vowel_primary_secondary(data2,"au")
ae <- get_vowel_primary_secondary(data2,"ae")
ai <- get_vowel_primary_secondary(data2,"ai")
ao <- get_vowel_primary_secondary(data2,"ao")
ei <- get_vowel_primary_secondary(data2,"ei")
eu <- get_vowel_primary_secondary(data2,"eu")
ou <- get_vowel_primary_secondary(data2,"ou")
oi <- get_vowel_primary_secondary(data2,"oi")
iu <- get_vowel_primary_secondary(data2,"iu")
means <- rbind(ae,ai,ao,au,ei,eu,ou,oi,iu)
tokens <- data2 %>%
filter(vowel=="ai" |
vowel=="ae" |
vowel=="ao" |
vowel=="au" |
vowel=="eu" |
vowel=="ou" |
vowel=="oi" |
vowel=="iu" |
vowel=="ei") %>%
mutate(time2 = (time - 1)/8)
my_colors <- c("#000000",  "#CC79A7", "#56B4E9", "#0072B2", "#D55E00",  "#000000","#009E73", "#009E73", "#000000", "#CC79A7", "#000000", "#F0E442", "#0072B2", "#000000")
## add in some anchors
anchors <- mono_primary_secondary_means %>%
filter(vowel =="a"|vowel =="e"|vowel =="i"|vowel =="o"|vowel =="u")
##### Means alone
plot <- traj_means(means, "All speakers, normalized: Short diphthong trajectories, plus means of monophthongs") +
geom_text(data = anchors, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), cex=5)
direct.label(plot, list("bottom.points", cex=2))
data_allspeakers <- data
##### Set the speaker #####
data <- data_allspeakers %>%
filter(Speaker=="AA")
data_allspeakers <- data
##### Set the speaker #####
data <- data_allspeakers %>%
filter(Speaker=="AA")
t <- data %>%
ungroup() %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
t <- data %>%
ungroup() %>%
filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
## Run the plotting prep script
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("plotting_preparation.R")
## Set directory for plots and tables to be saved into that matches the speaker selected
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/AA/R_outputs")
my_colors <- c("#009E73", "#0072B2", "#009E73", "#0072B2", "#009E73", "#0072B2", "#009E73", "#0072B2", "#009E73", "#0072B2") # 10
#### Just means and ellipses
ggplot() +
stat_ellipse(data = mono_primary_secondary, aes(x = f2_inf, y = f1_inf, color = vowel), level = 0.67) +
scale_x_reverse() +
scale_y_reverse() +
theme_classic() +
scale_color_manual(values=my_colors) +
geom_text(data = mono_primary_secondary_means, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), cex=5) +
labs(title = "Speaker AA: Long and short vowels, inflection points, primary and secondary stress", x = "F2 (Hz)", y = "F1 (Hz)") +
theme(legend.position = "", plot.title = element_text(hjust = 0.5))
data1 <- data %>% filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
filter(pronouns == 0) %>%
filter(directionals == 0)
data2 <- data %>% filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0)
au <- get_vowel_primary_secondary(data2,"au")
ae <- get_vowel_primary_secondary(data2,"ae")
ai <- get_vowel_primary_secondary(data2,"ai")
ao <- get_vowel_primary_secondary(data2,"ao")
ei <- get_vowel_primary_secondary(data2,"ei")
eu <- get_vowel_primary_secondary(data2,"eu")
ou <- get_vowel_primary_secondary(data2,"ou")
oi <- get_vowel_primary_secondary(data2,"oi")
iu <- get_vowel_primary_secondary(data2,"iu")
Äi <- get_vowel_primary_secondary(data2,"Äi")
Äu <- get_vowel_primary_secondary(data2,"Äu")
means <- rbind(ae,ai,ao,au,ei,eu,ou,oi,iu,Äi,Äu)
tokens <- data2 %>%
filter(vowel=="ai" |
vowel=="ae" |
vowel=="ao" |
vowel=="au" |
vowel=="eu" |
vowel=="ou" |
vowel=="oi" |
vowel=="iu" |
vowel=="ei" |
vowel=="Äi" |
vowel=="Äu") %>%
mutate(time2 = (time - 1)/8)
my_colors <- c("#000000",  "#000000", "#CC79A7", "#56B4E9",  "#999999", "#0072B2", "#D55E00","#999999",  "#000000","#009E73", "#009E73", "#000000", "#CC79A7", "#000000", "#F0E442", "#0072B2", "#000000")
## add in some anchors
anchors <- mono_primary_secondary_means %>%
filter(vowel =="a"|vowel =="e"|vowel =="i"|vowel =="o"|vowel =="u"|vowel=="Ä")
plot <- traj_means(means, "Speaker AA: Diphthong trajectories, plus means of monophthongs") +
geom_text(data = anchors, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), cex=5)
direct.label(plot, list("bottom.points", cex=2))
# Save the plot
ggsave("AA_diph.png", height = 8, width = 8, units = "in")
means <- rbind(ae,ai,ao,au,Äi,Äu)
tokens <- data2 %>%
filter(vowel=="ai" |
vowel=="ae" |
vowel=="ao" |
vowel=="au" |
vowel=="Äi" |
vowel=="Äu") %>%
mutate(time2 = (time - 1)/8)
my_colors <- c("#000000",  "#000000", "#CC79A7", "#56B4E9",  "#999999", "#0072B2", "#D55E00","#999999",  "#000000", "#000000",  "#000000",  "#000000")
## add in some anchors
anchors <- mono_primary_secondary_means %>%
filter(vowel =="a"|vowel =="e"|vowel =="i"|vowel =="o"|vowel =="u"|vowel=="Ä")
plot <- traj_means(means, "Speaker AA: Diphthong trajectories, plus means of monophthongs") +
geom_text(data = anchors, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), cex=5)
direct.label(plot, list("bottom.points", cex=2))
## With pronouns and directionals
ou <- get_vowel_primary_secondary(data2, "ou")
Å <- get_vowel_primary_secondary(data2,"Å")
ei <- get_vowel_primary_secondary(data2,"ei")
Ä <- get_vowel_primary_secondary(data2,"Ä")
Ä« <- get_vowel_primary_secondary(data2,"Ä«")
Å« <- get_vowel_primary_secondary(data2,"Å«")
means <- rbind(ou,Å,ei,Ä«,Ä,Å«)
tokens <- data2 %>%
filter(vowel=="ou" |
vowel=="Å" |
vowel=="ei" |
vowel=="Ä" |
vowel=="Ä«" |
vowel=="Å«") %>%
mutate(time2 = (time - 1)/8)
my_colors <- c("#000000", "#999999", "#E69F00", "#56B4E9", "#009E73", "#0072B2") # 6
plot <- traj_means(means, "Speaker AA: Selected vowel trajectories, including pronouns/directionals")
direct.label(plot, list("bottom.points", cex=2))
# Save the plot
ggsave("AA_ei_ou.png", height = 8, width = 8, units = "in")
##### MAIKAI #####
ea_comparison_nomaikai  <- mono_primary_secondary %>%
filter(vowel == "a" | vowel == "e")
ea_comparison_maikai <- monophthongs %>%
filter(maikai==1) %>%
filter(vowel=="a")
ea_comparison_maikai$vowel <- "maikai"
ea_comparison_means <- mono_primary_secondary_means %>%
filter(vowel== "a" | vowel == "e")
my_colors <- c("#E69F00", "#56B4E9", "#000000") # 3
ggplot() +
geom_text(data = ea_comparison_means, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), size=8) +
stat_ellipse(data = ea_comparison_nomaikai, aes(x = f2_inf, y = f1_inf, color = vowel), level = 0.67) +
scale_x_reverse() + scale_y_reverse() +
scale_color_manual(values=my_colors) +
geom_text(data = ea_comparison_maikai, aes(x = f2_inf, y= f1_inf, color=vowel, label = word), size=4, alpha=1) +
theme_classic() +
labs(title = "Speaker AA: MaikaÊ»i-type tokens (primary stress), compared with /e/ and /a/", x = "F2 (Hz)", y = "F1 (Hz)") +
theme(legend.position = "", plot.title = element_text(hjust = 0.5))
oa_comparison_no_oa <- mono_primary_secondary %>%
filter(vowel == "a" | vowel == "o") # already excludes kinney type words
oa_comparison_just_oa <- monophthongs %>%
filter(vowel == "oa" )
oa_comparison_means <- mono_primary_secondary_means %>%
filter(vowel == "a" | vowel == "o")
oa_comparison_just_oa$next_word_alt <- ifelse(oa_comparison_just_oa$next_word =="-","final","non-final")
my_colors <- c("#E69F00", "#56B4E9", "#000000") # 3
ggplot() +
stat_ellipse(data = oa_comparison_no_oa, aes(x = f2_inf, y = f1_inf, color = vowel), level = 0.67) +
scale_x_reverse() + scale_y_reverse() +
geom_text(data = oa_comparison_just_oa, aes(x = f2_inf, y= f1_inf, color=vowel, label = word), size=4) +
theme_classic() +
geom_text(data = oa_comparison_means, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), size=8) +
scale_color_manual(values=my_colors) +
labs(title = "Speaker AA: Selected word tokens compared with /o/ and /a/ means", x = "F2 (Hz)", y = "F1 (Hz)") +
theme(legend.position = "", plot.title = element_text(hjust = 0.5))
#### LAILA, MAIKAI, KAIK- ####
ai <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ai")
ei <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ei")
laila <- data %>%
filter(word == "laila") %>%
filter(vowel == "ai") %>%
arrange(time)
laila$vowel <- "laila"
laila_means <- get_vowel_primary_secondary(laila,"laila")
maikai <- data %>%
filter(maikai==1) %>%
filter(vowel=="ai") %>%
arrange(time)
maikai$vowel <- "maikai"
maikai_means <- get_vowel_primary_secondary(maikai,"maikai")
kaika <- data %>%
filter(kaika == 1) %>%
filter(vowel == "ai") %>%
arrange(time)
kaika$vowel <- "kaik-"
kaika_means <- get_vowel_primary_secondary(kaika,"kaik-")
means <- rbind(ai, ei, laila_means, maikai_means,kaika_means)
my_colors <- c("#E69F00", "#009E73", "#D55E00", "#0072B2","#56B4E9")
plot <- traj_means(means, "Speaker AA: Selected words compared to /ei/ and /ai/, means")
direct.label(plot, list("bottom.points", cex=2))
## Laila tokens
plot <- traj_means_tokens(means,laila, "Speaker AA: Laila tokens and selected /ei/ and /ai/ means")
direct.label(plot, list("bottom.points", cex=2))
View(laila)
## Kaik- tokens
plot <- traj_means_tokens(means,kaika, "Speaker AA: Kaik- tokens and selected /ei/ and /ai/ means")
direct.label(plot, list("bottom.points", cex=2))
## Maikai tokens
plot <- traj_means_tokens(means,maikai, "Speaker AA: MaikaÊ»i tokens and selected /ei/ and /ai/ means")
direct.label(plot, list("bottom.points", cex=2))
