ggsave("SB_ei_ou.png", height = 8, width = 8, units = "in")
t <- tokens %>%
ungroup() %>%
select(vowel,filename) %>%
distinct() %>%
group_by(vowel) %>%
summarise(tokens = n())
t
# Save the table
write.table(t, file = "SB_ei_ou.txt", sep = ",", quote = FALSE, row.names = F)
## No pronouns or directionals
ou <- get_vowel_primary_secondary(data1, "ou")
ō <- get_vowel_primary_secondary(data1,"ō")
ei <- get_vowel_primary_secondary(data1,"ei")
ē <- get_vowel_primary_secondary(data1,"ē")
# ī <- get_vowel_primary_secondary(data1,"ī")
ū <- get_vowel_primary_secondary(data1,"ū")
means <- rbind(ou,ō,ei,ē,ū)
tokens <- data1 %>%
filter(vowel=="ou" |
vowel=="ō" |
vowel=="ei" |
vowel=="ē" |
vowel=="ī" |
vowel=="ū") %>%
mutate(time2 = (time - 1)/8)
my_colors <- c("#000000", "#999999", "#56B4E9", "#009E73", "#0072B2") # 6
plot <- traj_means(means, "Speaker SB: Selected vowel trajectories, no pronouns/directionals")
direct.label(plot, list("bottom.points", cex=2))
# Save the plot
ggsave("SB_ei_ou_nopron.png", height = 8, width = 8, units = "in")
t <- tokens %>%
ungroup() %>%
select(vowel,filename) %>%
distinct() %>%
group_by(vowel) %>%
summarise(tokens = n())
t
# Save the table
write.table(t, file = "SB_ei_ou_nopron.txt", sep = ",", quote = FALSE, row.names = F)
###### Variation between and within words ######
##### MAIKAI #####
ea_comparison_nomaikai  <- mono_primary_secondary %>%
filter(vowel == "a" | vowel == "e")
ea_comparison_maikai <- monophthongs %>%
filter(maikai==1) %>%
filter(vowel=="a")
ea_comparison_maikai$vowel <- "maikai"
ea_comparison_means <- mono_primary_secondary_means %>%
filter(vowel== "a" | vowel == "e")
my_colors <- c("#E69F00", "#56B4E9", "#000000") # 3
ggplot() +
geom_text(data = ea_comparison_means, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), size=8) +
stat_ellipse(data = ea_comparison_nomaikai, aes(x = f2_inf, y = f1_inf, color = vowel), level = 0.67) +
scale_x_reverse() + scale_y_reverse() +
scale_color_manual(values=my_colors) +
geom_text(data = ea_comparison_maikai, aes(x = f2_inf, y= f1_inf, color=vowel, label = word), size=4, alpha=1) +
theme_classic() +
labs(title = "Speaker SB: Maikaʻi-type tokens (primary stress), compared with /e/ and /a/", x = "F2 (Hz)", y = "F1 (Hz)") +
theme(legend.position = "", plot.title = element_text(hjust = 0.5))
# Save the plot
ggsave("SB_maikai.png", height = 7, width = 7, units = "in")
t <- ea_comparison_maikai %>%
ungroup() %>%
group_by(word) %>%
summarise(tokens = n())
t
# Save the table
write.table(t, file = "SB_maikai.txt", sep = ",", quote = FALSE, row.names = F)
##### AOLE TYPE WORDS #####
oa_comparison_no_oa <- mono_primary_secondary %>%
filter(vowel == "a" | vowel == "o") # already excludes kinney type words
oa_comparison_just_oa <- monophthongs %>%
filter(vowel == "oa" )
oa_comparison_means <- mono_primary_secondary_means %>%
filter(vowel == "a" | vowel == "o")
oa_comparison_just_oa$next_word_alt <- ifelse(oa_comparison_just_oa$next_word =="-","final","non-final")
my_colors <- c("#E69F00", "#56B4E9", "#000000") # 3
ggplot() +
stat_ellipse(data = oa_comparison_no_oa, aes(x = f2_inf, y = f1_inf, color = vowel), level = 0.67) +
scale_x_reverse() + scale_y_reverse() +
geom_text(data = oa_comparison_just_oa, aes(x = f2_inf, y= f1_inf, color=vowel, label = word), size=4) +
theme_classic() +
geom_text(data = oa_comparison_means, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), size=8) +
scale_color_manual(values=my_colors) +
labs(title = "Speaker SB: Selected word tokens compared with /o/ and /a/ means", x = "F2 (Hz)", y = "F1 (Hz)") +
theme(legend.position = "", plot.title = element_text(hjust = 0.5))
# Save the plot
ggsave("SB_aole.png", height = 8, width = 8, units = "in")
t <- oa_comparison_just_oa %>%
ungroup() %>%
group_by(word) %>%
summarise(tokens = n())
t
# Save the table
write.table(t, file = "SB_aole.txt", sep = ",", quote = FALSE, row.names = F)
my_shapes <- c(17,0)
ggplot() +
stat_ellipse(data = oa_comparison_no_oa, aes(x = f2_inf, y = f1_inf, color = vowel), level = 0.67) +
scale_x_reverse() + scale_y_reverse() +
scale_color_manual(values=my_colors) +
scale_shape_manual(values=my_shapes) +
geom_point(data = oa_comparison_just_oa, aes(x = f2_inf, y= f1_inf, color=vowel, shape = next_word_alt), size=4, alpha=1) +
geom_text(data = oa_comparison_means, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), size=8) +
theme_classic() +
labs(title = "Speaker SB: Selected word tokens compared with /o/ and /a/ means", x = "F2 (Hz)", y = "F1 (Hz)", shape="Utterance-final?") +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5)) +
guides(colour=F)
# Save the plot
ggsave("SB_aole_following.png", height = 8, width = 8, units = "in")
#### LAILA, MAIKAI, KAIK- ####
ai <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ai")
ei <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ei")
laila <- data %>%
filter(word == "laila") %>%
filter(vowel == "ai") %>%
arrange(time)
laila$vowel <- "laila"
laila_means <- get_vowel_primary_secondary(laila,"laila")
maikai <- data %>%
filter(maikai==1) %>%
filter(vowel=="ai") %>%
arrange(time)
maikai$vowel <- "maikai"
maikai_means <- get_vowel_primary_secondary(maikai,"maikai")
kaika <- data %>%
filter(kaika == 1) %>%
filter(vowel == "ai") %>%
arrange(time)
kaika$vowel <- "kaik-"
kaika_means <- get_vowel_primary_secondary(kaika,"kaik-")
means <- rbind(ai, ei, laila_means, maikai_means,kaika_means)
my_colors <- c("#E69F00", "#009E73", "#D55E00", "#0072B2","#56B4E9")
plot <- traj_means(means, "Speaker SB: Selected words compared to /ei/ and /ai/, means")
direct.label(plot, list("bottom.points", cex=2))
# Save the plot
ggsave("SB_laila_maikai_kaika_means.png", height = 8, width = 8, units = "in")
t <- rbind(maikai,laila,kaika) %>%
ungroup() %>%
select(word,filename) %>%
distinct() %>%
group_by(word) %>%
summarise(tokens = n())
t
# Save the table
write.table(t, file = "SB_laila_maikai_kaika.txt", sep = ",", quote = FALSE, row.names = F)
#
# # means and tokens together
# ggplot() +
#   geom_path(data = laila, aes(f2, f1, group=filename, color=vowel), arrow = arrow(), size=0.2, alpha=0.8)+
#   geom_path(data = maikai, aes(f2, f1, group=filename, color=vowel), arrow = arrow(), size=0.2, alpha=0.8)+
#   geom_path(data = kaika, aes(f2, f1, group=filename, color=vowel), arrow = arrow(), size=0.2, alpha=0.8)+
#   geom_path(data = means, aes(f2, f1, color=vowel), arrow = arrow(), size = 1, alpha = 1)+
#   scale_color_manual(values=my_colors) +
#   labs(title = "Speaker SB: Selected word tokens and means compared to /ei/ and /ai/ means", x = "F2 (Hz)", y = "F1 (Hz)") +
#   theme_classic() +
#   theme(legend.title=element_blank(), plot.title = element_text(hjust = 0.5)) +
#   scale_y_reverse()+
#   scale_x_reverse()
#
#
# # Save the plot
# ggsave("SB_laila_maikai_kaika.png", height = 8, width = 8, units = "in")
#
### Chapter 6: Individual speakers
### Speaker: JM
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("mahal_overlap.R") ## functions that will be needed
source("ggplot2_trajectory_functions.R") ## functions that will be needed
source("calculating_exclusions.R")
data_allspeakers <- data
##### Set the speaker #####
data <- data_allspeakers %>%
filter(Speaker=="JM")
t <- data %>%
ungroup() %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
t <- data %>%
ungroup() %>%
filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
select(vowel,filename) %>%
distinct() %>%
summarise(tokens = n())
t
## Run the plotting prep script
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/R_scripts/")
source("plotting_preparation.R")
## Set directory for plots and tables to be saved into that matches the speaker selected
setwd("/Users/Thomas/Documents/Hawaiian_Phonetics/Dissertation/Manaleo/JM/R_outputs")
##### Monophthongs #####
##### Using inflection points, no vowels abutting
##### Plot
my_colors <- c("#009E73", "#0072B2", "#009E73", "#0072B2", "#009E73", "#0072B2", "#009E73", "#0072B2", "#009E73", "#0072B2") # 10
#### Just means and ellipses
ggplot() +
stat_ellipse(data = mono_primary_secondary, aes(x = f2_inf, y = f1_inf, color = vowel), level = 0.67) +
scale_x_reverse() +
scale_y_reverse() +
theme_classic() +
scale_color_manual(values=my_colors) +
geom_text(data = mono_primary_secondary_means, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), cex=5) +
labs(title = "Speaker JM: Long and short vowels, inflection points, primary and secondary stress", x = "F2 (Hz)", y = "F1 (Hz)") +
theme(legend.position = "", plot.title = element_text(hjust = 0.5))
# Save the plot
ggsave("JM_overall_mono.png", height = 8, width = 8, units = "in")
t <- mono_primary_secondary %>%
ungroup() %>%
select(vowel,filename) %>%
distinct() %>%
group_by(vowel) %>%
summarise(tokens = n())
t
# Save the table
write.table(t, file = "JM_overall_mono.txt", sep = ",", quote = FALSE, row.names = F)
#### Dipththongs #####
data1 <- data %>% filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
filter(pronouns == 0) %>%
filter(directionals == 0)
data2 <- data %>% filter(previous_sound %!in% list_of_vowels, next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0)
au <- get_vowel_primary_secondary(data2,"au")
ae <- get_vowel_primary_secondary(data2,"ae")
ai <- get_vowel_primary_secondary(data2,"ai")
ao <- get_vowel_primary_secondary(data2,"ao")
ei <- get_vowel_primary_secondary(data2,"ei")
# eu <- get_vowel_primary_secondary(data2,"eu")
ou <- get_vowel_primary_secondary(data2,"ou")
oi <- get_vowel_primary_secondary(data2,"oi")
# iu <- get_vowel_primary_secondary(data2,"iu")
āi <- get_vowel_primary_secondary(data2,"āi")
āu <- get_vowel_primary_secondary(data2,"āu")
means <- rbind(ae,ai,ao,au,ei,ou,oi,āi,āu)
tokens <- data2 %>%
filter(vowel=="ai" |
vowel=="ae" |
vowel=="ao" |
vowel=="au" |
vowel=="eu" |
vowel=="ou" |
vowel=="oi" |
vowel=="iu" |
vowel=="ei" |
vowel=="āi" |
vowel=="āu") %>%
mutate(time2 = (time - 1)/8)
my_colors <- c("#000000", "#000000", "#CC79A7", "#E69F00", "#999999", "#0072B2", "#D55E00", "#999999", "#000000","#009E73",            "#000000",                  "#000000", "#56B4E9", "#009E73", "#000000")
#                 a             ā          ae        ai        āi         ao        au         āu          e        ei           eu          i         iu          o         oi          ou          u
## add in some anchors
anchors <- mono_primary_secondary_means %>%
filter(vowel =="a"|vowel =="e"|vowel =="i"|vowel =="o"|vowel =="u"|vowel=="ā")
plot <- traj_means(means, "Speaker JM: Diphthong trajectories, plus means of monophthongs") +
geom_text(data = anchors, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), cex=5)
direct.label(plot, list("bottom.points", cex=2))
# Save the plot
ggsave("JM_diph.png", height = 8, width = 8, units = "in")
t <- tokens %>%
ungroup() %>%
select(vowel,filename) %>%
distinct() %>%
group_by(vowel) %>%
summarise(tokens = n())
t
# Save the table
write.table(t, file = "JM_diph.txt", sep = ",", quote = FALSE, row.names = F)
###### A closer look at /ei/ and /ou/ #####
## With pronouns and directionals
ou <- get_vowel_primary_secondary(data2, "ou")
ō <- get_vowel_primary_secondary(data2,"ō")
ei <- get_vowel_primary_secondary(data2,"ei")
ē <- get_vowel_primary_secondary(data2,"ē")
ī <- get_vowel_primary_secondary(data2,"ī")
ū <- get_vowel_primary_secondary(data2,"ū")
means <- rbind(ou,ō,ei,ī,ē,ū)
tokens <- data2 %>%
filter(vowel=="ou" |
vowel=="ō" |
vowel=="ei" |
vowel=="ē" |
vowel=="ī" |
vowel=="ū") %>%
mutate(time2 = (time - 1)/8)
my_colors <- c("#000000", "#999999", "#E69F00", "#56B4E9", "#009E73", "#0072B2") # 6
plot <- traj_means(means, "Speaker JM: Selected vowel trajectories, including pronouns/directionals")
direct.label(plot, list("bottom.points", cex=2))
# Save the plot
ggsave("JM_ei_ou.png", height = 8, width = 8, units = "in")
t <- tokens %>%
ungroup() %>%
select(vowel,filename) %>%
distinct() %>%
group_by(vowel) %>%
summarise(tokens = n())
t
# Save the table
write.table(t, file = "JM_ei_ou.txt", sep = ",", quote = FALSE, row.names = F)
## No pronouns or directionals
ou <- get_vowel_primary_secondary(data1, "ou")
ō <- get_vowel_primary_secondary(data1,"ō")
ei <- get_vowel_primary_secondary(data1,"ei")
ē <- get_vowel_primary_secondary(data1,"ē")
ī <- get_vowel_primary_secondary(data1,"ī")
ū <- get_vowel_primary_secondary(data1,"ū")
means <- rbind(ou,ō,ei,ī,ē,ū)
tokens <- data1 %>%
filter(vowel=="ou" |
vowel=="ō" |
vowel=="ei" |
vowel=="ē" |
vowel=="ī" |
vowel=="ū") %>%
mutate(time2 = (time - 1)/8)
my_colors <- c("#000000", "#999999", "#E69F00", "#56B4E9", "#009E73", "#0072B2") # 6
plot <- traj_means(means, "Speaker JM: Selected vowel trajectories, no pronouns/directionals")
direct.label(plot, list("bottom.points", cex=2))
# Save the plot
ggsave("JM_ei_ou_nopron.png", height = 8, width = 8, units = "in")
t <- tokens %>%
ungroup() %>%
select(vowel,filename) %>%
distinct() %>%
group_by(vowel) %>%
summarise(tokens = n())
t
# Save the table
write.table(t, file = "JM_ei_ou_nopron.txt", sep = ",", quote = FALSE, row.names = F)
###### Variation between and within words ######
##### MAIKAI #####
ea_comparison_nomaikai  <- mono_primary_secondary %>%
filter(vowel == "a" | vowel == "e")
ea_comparison_maikai <- monophthongs %>%
filter(maikai==1) %>%
filter(vowel=="a")
ea_comparison_maikai$vowel <- "maikai"
ea_comparison_means <- mono_primary_secondary_means %>%
filter(vowel== "a" | vowel == "e")
my_colors <- c("#E69F00", "#56B4E9", "#000000") # 3
ggplot() +
geom_text(data = ea_comparison_means, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), size=8) +
stat_ellipse(data = ea_comparison_nomaikai, aes(x = f2_inf, y = f1_inf, color = vowel), level = 0.67) +
scale_x_reverse() + scale_y_reverse() +
scale_color_manual(values=my_colors) +
geom_text(data = ea_comparison_maikai, aes(x = f2_inf, y= f1_inf, color=vowel, label = word), size=4, alpha=1) +
theme_classic() +
labs(title = "Speaker JM: Maikaʻi-type tokens (primary stress), compared with /e/ and /a/", x = "F2 (Hz)", y = "F1 (Hz)") +
theme(legend.position = "", plot.title = element_text(hjust = 0.5))
# Save the plot
ggsave("JM_maikai.png", height = 7, width = 7, units = "in")
t <- ea_comparison_maikai %>%
ungroup() %>%
group_by(word) %>%
summarise(tokens = n())
t
# Save the table
write.table(t, file = "JM_maikai.txt", sep = ",", quote = FALSE, row.names = F)
##### AOLE TYPE WORDS #####
oa_comparison_no_oa <- mono_primary_secondary %>%
filter(vowel == "a" | vowel == "o") # already excludes kinney type words
oa_comparison_just_oa <- monophthongs %>%
filter(vowel == "oa" )
oa_comparison_means <- mono_primary_secondary_means %>%
filter(vowel == "a" | vowel == "o")
oa_comparison_just_oa$next_word_alt <- ifelse(oa_comparison_just_oa$next_word =="-","final","non-final")
my_colors <- c("#E69F00", "#56B4E9", "#000000") # 3
ggplot() +
stat_ellipse(data = oa_comparison_no_oa, aes(x = f2_inf, y = f1_inf, color = vowel), level = 0.67) +
scale_x_reverse() + scale_y_reverse() +
geom_text(data = oa_comparison_just_oa, aes(x = f2_inf, y= f1_inf, color=vowel, label = word), size=4) +
theme_classic() +
geom_text(data = oa_comparison_means, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), size=8) +
scale_color_manual(values=my_colors) +
labs(title = "Speaker JM: Selected word tokens compared with /o/ and /a/ means", x = "F2 (Hz)", y = "F1 (Hz)") +
theme(legend.position = "", plot.title = element_text(hjust = 0.5))
# Save the plot
ggsave("JM_aole.png", height = 8, width = 8, units = "in")
t <- oa_comparison_just_oa %>%
ungroup() %>%
group_by(word) %>%
summarise(tokens = n())
t
# Save the table
write.table(t, file = "JM_aole.txt", sep = ",", quote = FALSE, row.names = F)
my_shapes <- c(17,0)
ggplot() +
stat_ellipse(data = oa_comparison_no_oa, aes(x = f2_inf, y = f1_inf, color = vowel), level = 0.67) +
scale_x_reverse() + scale_y_reverse() +
scale_color_manual(values=my_colors) +
scale_shape_manual(values=my_shapes) +
geom_point(data = oa_comparison_just_oa, aes(x = f2_inf, y= f1_inf, color=vowel, shape = next_word_alt), size=4, alpha=1) +
geom_text(data = oa_comparison_means, aes(x = mean_f2_inf, y = mean_f1_inf, color = vowel, label = vowel, fontface=2), size=8) +
theme_classic() +
labs(title = "Speaker JM: Selected word tokens compared with /o/ and /a/ means", x = "F2 (Hz)", y = "F1 (Hz)", shape="Utterance-final?") +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5)) +
guides(colour=F)
# Save the plot
ggsave("JM_aole_following.png", height = 8, width = 8, units = "in")
#### LAILA, MAIKAI, KAIK- ####
ai <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ai")
ei <- data %>%
filter(previous_sound %!in% list_of_vowels | next_sound %!in% list_of_vowels) %>%
filter(Kinney1956 == 0) %>%
get_vowel_primary_secondary("ei")
laila <- data %>%
filter(word == "laila") %>%
filter(vowel == "ai") %>%
arrange(time)
laila$vowel <- "laila"
laila_means <- get_vowel_primary_secondary(laila,"laila")
maikai <- data %>%
filter(maikai==1) %>%
filter(vowel=="ai") %>%
arrange(time)
maikai$vowel <- "maikai"
maikai_means <- get_vowel_primary_secondary(maikai,"maikai")
kaika <- data %>%
filter(kaika == 1) %>%
filter(vowel == "ai") %>%
arrange(time)
kaika$vowel <- "kaik-"
kaika_means <- get_vowel_primary_secondary(kaika,"kaik-")
means <- rbind(ai, ei, laila_means, maikai_means,kaika_means)
my_colors <- c("#E69F00", "#009E73", "#D55E00", "#0072B2","#56B4E9")
plot <- traj_means(means, "Speaker JM: Selected words compared to /ei/ and /ai/, means")
direct.label(plot, list("bottom.points", cex=2))
# Save the plot
ggsave("JM_laila_maikai_kaika.png", height = 8, width = 8, units = "in")
t <- rbind(maikai,laila,kaika) %>%
ungroup() %>%
select(word,filename) %>%
distinct() %>%
group_by(word) %>%
summarise(tokens = n())
t
# Save the table
write.table(t, file = "JM_laila_maikai_kaika.txt", sep = ",", quote = FALSE, row.names = F)
# #### TL and VL
# # data2 is dataset with pronouns and directionals, but without Kinney words
# traj_dist <- data2 %>%
#   group_by(filename) %>%
#   arrange(time) %>%
#   filter(time!=1, time!=9) %>%
#   mutate(lead_f1=lead(f1),
#          lead_f2=lead(f2)) %>%
#   mutate(eucl_dist = eucl_dist(f1,lead_f1,lead_f2,f2))
# traj_dist_pron_included <- traj_dist %>%
#   group_by(filename, Speaker, vowel, word, previous_sound, next_sound, stress, following_vowel,previous_vowel,NormFreq) %>%
#   summarise(TL = sum(eucl_dist,na.rm=T))
#
# vd <- data2 %>%
#   group_by(filename) %>%
#   filter(time==2 | time==8) %>%
#   #  filter(time==1 | time==9) %>%
#   mutate(lead_f1=lead(f1),
#          lead_f2=lead(f2)) %>%
#   select(-f0,-cutoff,-rank,-RAWFREQ,-PercentCoverage) %>%
#   mutate(vector_dist = eucl_dist(f1,lead_f1,lead_f2,f2)) %>%
#   filter(is.na(vector_dist) == F)
# vd_pron_included <- vd %>%
#   group_by(filename, Speaker, vowel, word, previous_sound, next_sound, stress, following_vowel,previous_vowel,NormFreq) %>%
#   summarise(VL = sum(vector_dist,na.rm=T))
#
#
# ###### ō vs ou and ē vs ei TL and VL
#
# ## TL ##
#
# ## Subset the vowels to compare
# ō_ou_TL <- traj_dist_pron_included %>%
#   filter(vowel=="ō"|vowel=="ou")
# ē_ei_TL <- traj_dist_pron_included %>%
#   filter(vowel=="ē"|vowel=="ei")
#
# ## VL ##
#
# ## Subset the vowels to compare
# ō_ou_VL <- vd_pron_included %>%
#   filter(vowel=="ō"|vowel=="ou")
# ē_ei_VL <- vd_pron_included %>%
#   filter(vowel=="ē"|vowel=="ei")
#
# ## Plot together as as pirate plot ##
#
# ē_ei_TL <- ē_ei_TL %>% ungroup()
# ō_ou_TL <- ō_ou_TL %>% ungroup()
# ē_ei_VL <- ē_ei_VL %>% ungroup()
# ō_ou_VL <- ō_ou_VL %>% ungroup()
#
# ē_ei_TLVL <- inner_join(ē_ei_VL, select(ē_ei_TL, c(filename,TL)), by ="filename")
# ō_ou_TLVL <- inner_join(ō_ou_VL, select(ō_ou_TL, c(filename,TL)), by ="filename")
#
# TLVL <- rbind(ē_ei_TLVL,ō_ou_TLVL)
#
# gathered <- gather(TLVL, measure, Hz, VL, TL)
#
# # Save the plot
# png("JM_ē_ei_ō_ou_TLVL.png", height = 8, width = 8, units = "in", res=300)
# pirateplot(formula = Hz ~ vowel + measure,
#            data = gathered,
#            theme = 2)
# dev.off()
